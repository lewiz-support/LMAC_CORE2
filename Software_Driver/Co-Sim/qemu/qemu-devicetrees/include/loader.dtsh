/*
 * Loader Macros
 *
 * Copyright (c) 2018, Xilinx Inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <organization> nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Creates a loader object that will issue a memory write at reset,
 * after all HW perihperals have come out of reset.
 *
 * This is the base implementation that takes the full argument-set.
 * expect this to change in the future if new attributes come along.
 */

#define LOADER_WRITE_MATTR(_cpu_nr, _addr, _data, _len, _debug, _secure, _requester_id)	\
glue(loader_write_, _addr):glue(glue(glue(loader_write_cpu, _cpu_nr), _), _data)@_addr {	\
	compatible = "loader";			\
	addr = <_addr>;				\
	data = <_data>;				\
	data-len = <_len>;			\
	cpu-num = <_cpu_nr>;			\
	attrs-debug = <_debug>;			\
	attrs-secure = <_secure>;		\
	attrs-requester-id = <_requester_id>;	\
}

#define LOADER_WRITE(cpu_nr, addr, data, len)	\
	LOADER_WRITE_MATTR(cpu_nr, addr, data, len, 0, 0, 0)

#define LOADER_DEBUG_WRITE(cpu_nr, addr, data, len)	\
	LOADER_WRITE_MATTR(cpu_nr, addr, data, len, 1, 0, 0)

#define LOADER_SECURE_WRITE(cpu_nr, addr, data, len)	\
	LOADER_WRITE_MATTR(cpu_nr, addr, data, len, 0, 1, 0)
