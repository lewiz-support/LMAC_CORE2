##
## Copyright (C) 2018 LeWiz Communications, Inc. 
## 
## This library is free software; you can redistribute it and/or
## modify it under the terms of the GNU Lesser General Public
## License as published by the Free Software Foundation; either
## version 2.1 of the License, or (at your option) any later version.
## 
## This library is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## Lesser General Public License for more details.
## 
## You should have received a copy of the GNU Lesser General Public
## License along with this library release; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
## 
## LeWiz can be contacted at:  support@lewiz.com
## or address:  
## PO Box 9276
## San Jose, CA 95157-9276
## www.lewiz.com
## 
##    Author: LeWiz Communications, Inc.
##    Language: Verilog
##

# source C:/LMAC2_INFO/TESTS/CASE03_07B_PACKETGAP/TEST08_EOF03/NORMAL_IP_PKT/Script_c03t08_7B_pkt_gap_5G.txt
# Script to test LMAC: test rx path, 64-bit mode (XGMII).
# fmac_speed: 000 = 10 Gig mode
#			  101 = 5 Gig mode
#			  010 = 2.5 Gig mode
#			  001 = 1 Gig mode
# rx_pkt_gen_sel selects the source of the data on RxD and RxC. If 1 = data is from the rx_pkt_gen. If 0 = loopback data (TxD and TxC is sent to RxD and RxC).                                                                                                                    
                                                                                                                   
relaunch_sim                                                                                                       
                                                                                                                   
# Select the fmac_speed                                                                                            
add_force {/AXIS_LMAC_TB/phy_emulator_10G/fmac_speed} -radix bin {101 0ns}                                                          
                                                                                                                
add_force {/AXIS_LMAC_TB/phy_emulator_10G/rx_pkt_gen_start_addr} -radix unsigned {00 0ns}                           
add_force {/AXIS_LMAC_TB/phy_emulator_10G/rx_pkt_gen_read_cnt} -radix unsigned {00 0ns}                             
                                                                                                                   
                                                                                                                   
# Select the rx_pkt_gen memory data                                                                                
run 200ns                                                                                                          
                                                                                                                   
add_force {/AXIS_LMAC_TB/phy_emulator_10G/rx_pkt_gen_sel} -radix bin {1 0ns}                                        
                                                                                                                   
# Generate the rx_pkt_gen data packet	-- (pkt - 1)                                                                 
add_force {/AXIS_LMAC_TB/phy_emulator_10G/rx_pkt_gen_read_cnt} -radix unsigned {435 0ns}                            
add_force {/AXIS_LMAC_TB/phy_emulator_10G/rx_pkt_gen_start_addr} -radix unsigned {1 0ns}                            
add_force {/AXIS_LMAC_TB/phy_emulator_10G/rx_pkt_gen_en} -radix bin {1 0ns}                                         
run 8ns                                                                                                         
add_force {/AXIS_LMAC_TB/phy_emulator_10G/rx_pkt_gen_en} -radix bin {0 0ns}                                         
                                                                                                                   
                                                                                                                   
run 10us 